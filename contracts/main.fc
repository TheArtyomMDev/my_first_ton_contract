#include "imports/stdlib.fc";
#include "imports/map.fc";

;; const const::min_tons_for_storage = 10000000; ;; 0.01 TON
;;
;; (int, slice, slice) load_data() inline {
;;     var ds = get_data().begin_parse();
;;     return (
;;         ds~load_uint(32), ;; counter_value
;;         ds~load_msg_addr(), ;; the most recent sender
;;         ds~load_msg_addr() ;; owner_address
;;     );
;; }
;;
;; () save_data(int counter_value, slice recent_sender, slice owner_address) impure inline {
;;     set_data(begin_cell()
;;         .store_slice(recent_sender) ;; the most recent sender
;;         .store_slice(owner_address) ;; owner_address
;;         .end_cell());
;; }

(int, cell) get_value(int addr) method_id {
    cell root = get_data();
    return BST_find(root, addr);
}


() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {

    cell root = get_data();
    ;; var root = null();

    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);

    var (workchain, addr) = sender_address.parse_std_addr();

    if (op == 1) {
        ;; Add data
        root = BST_insert(root, addr, begin_cell().store_uint(msg_value, 32).end_cell());
        set_data(root);
    }

    throw(111);

    ;; var (exists, value) = BST_find(root, 10);
    ;; if (exists) {
    ;;
    ;; }
    ;;
    ;; root = BST_delete(root, 10);

    ;;
    ;; int op = in_msg_body~load_uint(32);
    ;; int query_id = in_msg_body~load_uint(64);
    ;;
    ;;
    ;; cell data = get_data();
    ;; slice ds = data.begin_parse();
    ;; cell dic = ds.slice_bits() == 0 ? new_dict() : data;
    ;; if (op == 1) {
    ;;     ;; add new entry here
    ;; }
    ;; if (op == 2) {
    ;;     ;; delete here
    ;; }
    ;; throw (1001);
}

;; (int, slice, slice) get_contract_storage_data() method_id {
;;     slice ds = get_data().begin_parse();
;;     return (
;;         ds~load_uint(32), ;; counter_value
;;         ds~load_msg_addr(), ;; the most recent sender
;;         ds~load_msg_addr() ;; the owner
;;     );
;; }
;;
;; int balance() method_id {
;;     var [balance, _] = get_balance();
;;     return balance;
;; }