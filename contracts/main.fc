#include "imports/stdlib.fc";
(int, slice, slice) load_data() inline {
    var ds = get_data().begin_parse();
    return (
        ds~load_uint(32), ;; counter_value
        ds~load_msg_addr(), ;; the most recent sender
        ds~load_msg_addr() ;; owner_address
    );
}

() save_data(int counter_value, slice recent_sender, slice owner_address) impure inline {
    set_data(begin_cell()
        .store_uint(counter_value, 32) ;; counter_value
        .store_slice(recent_sender) ;; the most recent sender
        .store_slice(owner_address) ;; owner_address
        .end_cell());
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    if (op == 1) {
        slice ds = get_data().begin_parse();
        int counter_value = ds~load_uint(32);
        set_data(
            begin_cell().store_uint(counter_value + 1, 32).store_slice(sender_address).end_cell()
        );
        return ();
    }

    return ();
}

(int, slice) get_contract_storage_data() method_id {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(32), ;; counter_value
        ds~load_msg_addr() ;; the most recent sender
    );
}