#include "imports/stdlib.fc";

;; const const::min_tons_for_storage = 10000000; ;; 0.01 TON

cell load_data() {
    cell data = get_data();
    slice ds = data.begin_parse();
    if (ds.slice_bits() == 0) {
        return new_dict();
    } else {
        return data;
    }
}

slice get_value(int addr) method_id {
    cell dic = load_data();

    ;; ~dump(addr);

    (slice payload, int success) = dic.udict_get?(256, addr);
    if (success == 0) {
        throw(98);
    }

    return payload;
}


() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    cell data = get_data();
    slice ds = data.begin_parse();
    cell dic = ds.slice_bits() == 0 ? new_dict() : data;

    var (workchain, addr) = sender_address.parse_std_addr();
    if (op == 1) {
        ;; Add data
        ;; ~dump(sender_address);
        ;; ~dump(sender_address~load_uint(256));
        ;; ~dump(sender_address~load_uint(64));
        ;; ~dump(addr);

        int usd_borrow = in_msg_body~load_uint(64);
        int min_price_liquidation = in_msg_body~load_uint(64);
        int max_price_liquidation = in_msg_body~load_uint(64);

        cell value = begin_cell()
            .store_uint(msg_value, 64)
            .store_uint(usd_borrow, 64)
            .store_uint(min_price_liquidation, 64)
            .store_uint(max_price_liquidation, 64)
            .end_cell();

        dic~udict_set(256, addr, value.begin_parse());
        set_data(dic);

        return ();
    }

    throw(2);
}

;; (int, slice, slice) get_contract_storage_data() method_id {
;;     slice ds = get_data().begin_parse();
;;     return (
;;         ds~load_uint(32), ;; counter_value
;;         ds~load_msg_addr(), ;; the most recent sender
;;         ds~load_msg_addr() ;; the owner
;;     );
;; }
;;
;; int balance() method_id {
;;     var [balance, _] = get_balance();
;;     return balance;
;; }